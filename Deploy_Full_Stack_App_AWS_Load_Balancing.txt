# Practice 3 - Cloud Deployment
# Deploy Full Stack App on AWS with Load Balancing

# ----------------------------------------------
# Backend (Node.js / Express) - server.js
# ----------------------------------------------
const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

app.get('/', (req, res) => {
  res.send('Hello from Backend - EC2 Instance!');
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

# ----------------------------------------------
# Backend Dockerfile (optional for containerized EC2)
# ----------------------------------------------
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5000
CMD ["node", "server.js"]

# ----------------------------------------------
# Frontend (React) - Dockerfile
# ----------------------------------------------
FROM node:18-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

# ----------------------------------------------
# AWS EC2 Deployment Steps
# ----------------------------------------------
# 1. Launch two EC2 instances for backend (Amazon Linux 2 or Ubuntu)
# 2. SSH into each instance and install Node.js:
sudo apt update -y
sudo apt install -y nodejs npm git

# 3. Clone your backend repo
git clone https://github.com/<username>/<repo>.git
cd <repo>

# 4. Install dependencies and start server
npm install
node server.js

# 5. (Optional) Run backend as a background service
nohup node server.js > output.log 2>&1 &

# 6. Launch another EC2 instance for the frontend
# Copy build files or deploy React app container with Nginx.

# 7. Create an Application Load Balancer (ALB):
# - Target group: backend EC2 instances (port 5000)
# - Listener: port 80 → forward to target group
# - Health checks: / endpoint
# - Security group: allow inbound HTTP (port 80)

# 8. Optional: Configure Route 53 for custom domain routing
# - Create a hosted zone and add A record pointing to ALB DNS

# 9. Test
# Access: http://<ALB-DNS-Name> or custom domain

# ----------------------------------------------
# Expected Output
# ----------------------------------------------
# ✅ Full stack app accessible via public URL
# ✅ AWS Application Load Balancer distributes traffic
# ✅ Backend EC2 instances respond independently
# ✅ Basic fault tolerance achieved
